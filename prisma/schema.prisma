generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  athlete
  administrador
}

enum SubscriptionPlan {
  free
  premium
  pro
}

enum SkillGroupTag {
  fundamental
  resource
}

enum Side {
  right
  left
  both
}

enum Category {
  beginner
  intermediate
  advanced
  pro
}

enum PlayerConditionType {
  physical
  mental
}

model Player {
  id                    String           @id @default(cuid())
  googleId              String?          @unique
  email                 String           @unique
  // emailVerified         Boolean          @default(false)
  // username              String?          @unique
  name                  String
  passwordHash          String?
  avatarUrl             String?
  age                   Int?
  bio                   String?
  countryCode           String?
  latitude              Float?
  longitude             Float?
  role                  Role             @default(athlete)
  subscriptionPlan      SubscriptionPlan @default(free)
  mainModalityId        String?
  physicalConditionName String?
  mentalConditionName   String?

  playerModalityStats PlayerModalityStat[]

  country           Country?         @relation(fields: [countryCode], references: [code])
  physicalCondition PlayerCondition? @relation("PhysicalCondition", fields: [physicalConditionName], references: [name])
  mentalCondition   PlayerCondition? @relation("MentalCondition", fields: [mentalConditionName], references: [name])
  mainModality      Modality?        @relation(fields: [mainModalityId], references: [modalityId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("players")
}

model Country {
  code  String @id
  name  String
  emoji String

  players Player[]

  @@map("countries")
}

model PlayerCondition {
  name                String              @id
  emoji               String
  playerConditionType PlayerConditionType

  physicalPlayers Player[] @relation("PhysicalCondition")
  mentalPlayers   Player[] @relation("MentalCondition")

  @@unique([name, playerConditionType])
  @@map("player_conditions")
}

model Modality {
  modalityId  String @id
  description String

  Player                Player[]
  SkillModalityRelation SkillModalityRelation[]
  PlayerModalityStat    PlayerModalityStat[]

  @@map("modalities")
}

model SkillModalityRelation {
  skillName  String
  modalityId String

  skill    Skill    @relation(fields: [skillName], references: [name], onDelete: Cascade)
  modality Modality @relation(fields: [modalityId], references: [modalityId], onDelete: Cascade)

  @@id([skillName, modalityId])
  @@map("skill_modality_relations")
}

model SkillType {
  skillTypeId String @id
  description String

  SkillSkillTypeRelation SkillSkillTypeRelation[]

  @@map("skill_types")
}

model SkillSkillTypeRelation {
  skillName   String
  skillTypeId String

  skill     Skill     @relation(fields: [skillName], references: [name], onDelete: Cascade)
  skillType SkillType @relation(fields: [skillTypeId], references: [skillTypeId])

  @@id([skillName, skillTypeId])
  @@map("skill_skill_type_relations")
}

model Skill {
  name        String @id
  description String

  skillGroup        SkillGroupTag
  skillModalities   SkillModalityRelation[]
  skillTypes        SkillSkillTypeRelation[]
  playerSkillMonths PlayerSkillMonth[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("skills")
}

model PlayerModalityStat {
  id         String @id @default(cuid())
  playerId   String
  modalityId String

  playerModalityMonths PlayerModalityMonth[]

  modality Modality @relation(fields: [modalityId], references: [modalityId], onDelete: Cascade)
  player   Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([playerId])
  @@map("player_modality_stats")
}

model PlayerModalityMonth {
  id               String   @id @default(cuid())
  playerModalityId String
  month            DateTime

  attack    Int
  defense   Int
  skills    Int
  resources Int
  overall   Int

  skillsDetails PlayerSkillMonth[]

  playerModalityStat PlayerModalityStat @relation(fields: [playerModalityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([playerModalityId, month])
  @@index([playerModalityId])
  @@index([month])
  @@index([createdAt])
  @@map("player_modality_months")
}

model PlayerSkillMonth {
  id                    String   @id @default(cuid())
  category              Category
  playerModalityMonthId String
  skillName             String

  playerModalityMonth PlayerModalityMonth @relation(fields: [playerModalityMonthId], references: [id], onDelete: Cascade)
  skill               Skill               @relation(fields: [skillName], references: [name], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([playerModalityMonthId, skillName])
  @@index([playerModalityMonthId])
  @@index([skillName])
  @@index([createdAt])
  @@map("player_skill_months")
}
